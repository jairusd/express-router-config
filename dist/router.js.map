{
  "version": 3,
  "sources": [
    "router.js"
  ],
  "names": [
    "configureRoutes",
    "sortByNumberOfSlashes",
    "previous",
    "current",
    "match",
    "split",
    "currentSlashCount",
    "length",
    "previousSlashCount",
    "currentLastPhrase",
    "previousLastPhrase",
    "sortRoutes",
    "routes",
    "Array",
    "isArray",
    "Error",
    "sort",
    "normalizeEndpoint",
    "endpoint",
    "replace",
    "routeTranslator",
    "route",
    "middleware",
    "prefix",
    "map",
    "_route",
    "group",
    "filter",
    "elem",
    "method",
    "action",
    "server",
    "concat"
  ],
  "mappings": ";;;;;;;;kBAyFwBA,e;;;;AAxFxB;;;;;;;;AAQA,SAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,OAAzC,EAAkD;AACjDD,YAAYA,SAASE,KAAT,CAAeC,KAAf,CAAqB,GAArB,CAAZ;AACAF,WAAWA,QAAQC,KAAR,CAAcC,KAAd,CAAoB,GAApB,CAAX;;AAEA,KAAMC,oBAAsBH,QAAQI,MAApC;AAAA,KACKC,qBAAsBN,SAASK,MADpC;AAAA,KAEKE,oBAAqBN,QAAQA,QAAQI,MAAR,GAAiB,CAAzB,EAA4BA,MAFtD;AAAA,KAGKG,qBAAsBR,SAASA,SAASK,MAAT,GAAkB,CAA3B,EAA8BA,MAHzD;;AAKA,KAAID,sBAAsBE,kBAA1B,EAA8C;AAC7C,SAAOC,oBAAoBC,kBAA3B;AACA;;AAED,QAAOJ,oBAAoBE,kBAA3B;AACA;;AAED;;;;;AAKA,SAASG,UAAT,CAAoBC,MAApB,EAA4B;AAC3B,KAAI,CAACC,MAAMC,OAAN,CAAcF,MAAd,CAAL,EAA4B;AAC3B,QAAM,IAAIG,KAAJ,4DAAkEH,MAAlE,yCAAkEA,MAAlE,eAAN;AACA;;AAED,QAAOA,OAAOI,IAAP,CAAYf,qBAAZ,CAAP;AACA;;AAED;;;;;;AAMA,SAASgB,iBAAT,CAA2BC,QAA3B,EAAqC;AACpC,cAAWA,SAASC,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAX;AACA;;AAED;;;;;;;;;AASA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,UAAhC,EAA4CC,MAA5C,EAAoD;AACnD,KAAIV,MAAMC,OAAN,CAAcO,KAAd,CAAJ,EAA0B;AACzB,SAAOA,MAAMG,GAAN,CAAU,UAAUC,MAAV,EAAkB;AAClC,OAAIA,OAAOC,KAAX,EAAkB;AACjB,WAAON,gBACNK,OAAOb,MADD,EAEJa,OAAOH,UAFH,EAGJG,OAAOC,KAHH,CAAP;AAKA;;AAED,UAAON,gBAAgBK,MAAhB,EAAwBH,UAAxB,EAAoCC,MAApC,CAAP;AACA,GAVM,CAAP;AAWA;;AAEDD,cAAa,CAAEA,UAAF,EAAcD,MAAMC,UAApB,EAAiCK,MAAjC,CAAwC;AAAA,SAAQC,IAAR;AAAA,EAAxC,CAAb;AACAL,UAAYA,SAAS,MAAGA,MAAH,GAAYF,MAAMjB,KAAlB,EAA0Be,OAA1B,CAAkC,IAAlC,EAAwC,GAAxC,CAAT,GAAwDE,MAAMjB,KAA1E;;AAEA,QAAO;AACNyB,UAAQR,MAAMQ,MADR;AAENzB,SAAOa,kBAAkBM,MAAlB,CAFD;AAGND,wBAHM;AAINQ,UAAQT,MAAMS;AAJR,EAAP;AAMA;;AAED;;;;;;AAMe,SAAS9B,eAAT,CAAyB+B,MAAzB,EAAiC;;AAE/C,QAAO,UAAUnB,MAAV,EAAkB;AAAA;;AACxBA,WAASD,WACR,YAAGqB,MAAH,gCAAcZ,gBAAgBR,MAAhB,CAAd,EADQ,CAAT;;AAIA;AACA,SAAOA,OAAOY,GAAP,CAAW,UAAUH,KAAV,EAAiB;AAClC,OAAIA,MAAMC,UAAN,CAAiBf,MAArB,EAA6B;AAC5B,WAAOwB,OAAOV,MAAMQ,MAAb,iBACNR,MAAMjB,KADA,4BAEDiB,MAAMC,UAFL,IAGJD,MAAMS,MAHF,GAAP;AAKA;;AAED,UAAOC,OAAOV,MAAMQ,MAAb,EAAqBR,MAAMjB,KAA3B,EAAkCiB,MAAMS,MAAxC,CAAP;AACA,GAVM,CAAP;AAWA,EAjBD;AAkBA",
  "file": "router.js",
  "sourceRoot": "../src",
  "sourcesContent": [
    "\r\n/**\r\n * Sort string based on slash occurence and length of\r\n * its last phrase.\r\n * \r\n * @param  {string} previous previous sort object\r\n * @param  {string} current  current sort object\r\n * @returns new sort value\r\n */\r\nfunction sortByNumberOfSlashes(previous, current) {\r\n\tprevious \t= previous.match.split('/')\r\n\tcurrent \t= current.match.split('/')\r\n\r\n\tconst currentSlashCount \t\t= current.length\r\n\t\t\t\t, previousSlashCount \t= previous.length\r\n\t\t\t\t, currentLastPhrase \t= current[current.length - 1].length\r\n\t\t\t\t, previousLastPhrase \t= previous[previous.length - 1].length\r\n\r\n\tif (currentSlashCount === previousSlashCount) {\r\n\t\treturn currentLastPhrase - previousLastPhrase\r\n\t}\r\n\r\n\treturn currentSlashCount - previousSlashCount\r\n}\r\n\r\n/**\r\n * sorts the given routes\r\n * @param  {array} routes array of routes\r\n * @returns sorted routes\r\n */\r\nfunction sortRoutes(routes) {\r\n\tif (!Array.isArray(routes)) {\r\n\t\tthrow new Error(`routes are expected to be an array of object, ${typeof routes} given.`)\r\n\t}\r\n\r\n\treturn routes.sort(sortByNumberOfSlashes)\r\n}\r\n\r\n/**\r\n * normalize our endpoint, make sure it doesn't \r\n * end with slash.\r\n * @param  {string} endpoint endpoint to be normalized\r\n * @returns normalized endpoint\r\n */\r\nfunction normalizeEndpoint(endpoint) {\r\n\treturn `/${endpoint.replace(/^\\/|\\/$/, '')}`\r\n}\r\n\r\n/**\r\n * A recursive function that takes a required route as an argument,\r\n * then calls itself if it's an array, otherwise returns the\r\n * translated route.\r\n * @param  {mixed} route array or object containing the route information\r\n * @param  {func} middleware middleware of the endpoint/group\r\n * @param  {string} prefix prepended to the beginning of endpoint\r\n * @returns object containing the translated route\r\n */\r\nfunction routeTranslator(route, middleware, prefix) {\r\n\tif (Array.isArray(route)) {\r\n\t\treturn route.map(function (_route) {\r\n\t\t\tif (_route.group) {\r\n\t\t\t\treturn routeTranslator(\r\n\t\t\t\t\t_route.routes\r\n\t\t\t\t\t, _route.middleware\r\n\t\t\t\t\t, _route.group\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\treturn routeTranslator(_route, middleware, prefix)\r\n\t\t})\r\n\t}\r\n\r\n\tmiddleware = [ middleware, route.middleware ].filter(elem => elem)\r\n\tprefix \t\t = prefix ? `${prefix}${route.match}`.replace('//', '/') : route.match\r\n\r\n\treturn {\r\n\t\tmethod: route.method,\r\n\t\tmatch: normalizeEndpoint(prefix),\r\n\t\tmiddleware,\r\n\t\taction: route.action\r\n\t}\r\n}\r\n\r\n/**\r\n * takes a restify server as an argument, returns a function\r\n * that takes an array of object.\r\n * @param {Server} server restify server\r\n * @returns routing function\r\n */\r\nexport default function configureRoutes(server) {\r\n\r\n\treturn function (routes) {\r\n\t\troutes = sortRoutes(\r\n\t\t\t[].concat( ...routeTranslator(routes) )\r\n\t\t)\r\n\r\n\t\t// safely route flatten translated routes.\r\n\t\treturn routes.map(function (route) {\r\n\t\t\tif (route.middleware.length) {\r\n\t\t\t\treturn server[route.method](\r\n\t\t\t\t\troute.match\r\n\t\t\t\t\t, ...route.middleware\r\n\t\t\t\t\t, route.action\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\treturn server[route.method](route.match, route.action)\r\n\t\t})\r\n\t}\r\n}\r\n\r\n"
  ]
}
